{
  "name": "ai-catalog-saas",
  "version": "1.0.0",
  "description": "SaaS platform for AI software vendors to sell projects to banks and insurance companies",
  "main": "server/index.js",
  "scripts": {
    "dev": "node scripts/robust-startup.js",
    "dev:legacy": "node scripts/dev-startup.js",
    "dev:verbose": "node scripts/check-ports.js development && npm run start:services && concurrently \"npm run server\" \"npm run client\"",
    "dev:full": "node scripts/robust-startup.js",
    "dev:full:verbose": "node scripts/check-ports.js development && npm run start:services && npm run reset:db && concurrently \"npm run server\" \"npm run client\"",
    "robust:start": "node scripts/robust-startup.js",
    "robust:restart": "docker compose down && node scripts/robust-startup.js",
    "dev:reset": "node scripts/robust-startup.js --force-reset",
    "dev:help": "node scripts/robust-startup.js --help",
    "start:services": "docker compose up -d && npm run wait:neo4j",
    "wait:neo4j": "node -e \"const neo4j=require('neo4j-driver');const d=neo4j.driver('bolt://localhost:7687',neo4j.auth.basic('neo4j','password123'));async function wait(){let retries=30;while(retries>0){try{const s=d.session();await s.run('RETURN 1');await s.close();console.log('Neo4j ready!');break;}catch(e){console.log('Waiting for Neo4j...');retries--;await new Promise(r=>setTimeout(r,2000));}if(retries===0){console.error('Neo4j failed to start');process.exit(1);}}await d.close()}wait();\"",
    "server": "nodemon server/index.js",
    "client": "cd client && PORT=3001 REACT_APP_CLEAN_OUTPUT=true npm start",
    "build": "cd client && npm run build",
    "install-all": "npm install && cd client && npm install",
    "reset:db": "node scripts/reset-db.js",
    "stop:services": "docker compose down",
    "test:services": "node scripts/check-ports.js test && npm run start:services",
    "test:server": "cp .env.test .env && PORT=5004 nodemon server/index.js",
    "test:client": "cd client && PORT=3004 REACT_APP_BACKEND_PORT=5004 npm start",
    "test:dev": "npm run test:services && concurrently \"npm run test:server\" \"npm run test:client\"",
    "test:backend": "cp .env.test .env && PORT=5004 npm test",
    "test:frontend": "cd client && PORT=3004 REACT_APP_BACKEND_PORT=5004 npm test",
    "test:full": "npm run test:services && npm run reset:db && concurrently \"npm run test:backend\" \"npm run test:frontend\"",
    "check-ports": "node scripts/check-ports.js"
  },
  "dependencies": {
    "@google/generative-ai": "^0.24.1",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "groq-sdk": "^0.7.0",
    "neo4j-driver": "^5.15.0"
  },
  "devDependencies": {
    "concurrently": "^8.2.2",
    "nodemon": "^3.0.2"
  }
}
